3
3-1 시스템 서버
  시스템에 대한 이미지를 구체화
  그후 서버검토에 들어감
시스템 개발 규모의 단위
  -맨먼스
    투입인원, 개월수로 산정
  -스탭수
    코드 라인단위로 산정
3-2 성능견적, 사이징
  시스템규모
    사용자 수에 따라 결정
  성능견적과 사이징
    동시 접속수가 증가하게되면 서버 사이즈를 키워야함
3-3 투자대비 효과
  서버가 필요한 이유
    다수의 클라이언트가 데이터를 공유하기위한 도구로서 사용
    시스템이 멈추거나 데이터가 없어지는 일을 피하기 위함
  pc대비 비용이 더 들기 때문에 투자대비 효과를 확인해야함
    효과액/투자액 으로 산정
3-4 ip주소, mac 주소
IP주소	네트워크에서 통신 상대를 식별하기 위한 번호, 컴퓨터 소프트웨어가 인식하는 컴퓨터 주소
  - 정의: 네트워크 상에서 장치를 식별하기 위한 고유한 주소.
  - 종류: IPv4 (32비트), IPv6 (128비트).
  - 역할: 데이터를 올바른 목적지로 전달.
  - 공인/사설: 인터넷 연결(공인), 로컬 네트워크 연결(사설).
MAC주소	자신의 네트워크 내에서 기기를 특정하기 위한 번호
  - 정의: 네트워크 인터페이스 카드(NIC)에 할당된 고유 식별자.
  - 형식: 48비트 16진수 (예: 00:1A:2B:3C:4D:5E).
  - 역할: 로컬 네트워크 내 장치를 구분.
  - 특징: 제조사에 의해 고유하게 할당, 일반적으로 변경 불가.
애플리케이션이 ip주소를 지정하고 주소록을 바탕으로 mac 주소를 확인
3-5 TCP/IP, UDP
TCP/IP 4계층
  - **응용 계층**: 사용자와 직접 상호작용하는 애플리케이션 서비스 제공 (HTTP, FTP 등).
  - **전송 계층**: 데이터의 신뢰성 있는 전송 보장 (TCP/UDP 사용).
  - **인터넷 계층**: 데이터의 목적지 간 라우팅 및 주소 지정 (IP 사용).
  - **네트워크 인터페이스 계층**: 물리적 데이터 전송 및 하드웨어 제어.

UDP (User Datagram Protocol)
  - **특징**: 비연결형 프로토콜로 신뢰성보다는 빠른 데이터 전송 중점.
  - **장점**: 오버헤드가 적어 속도가 빠름.
  - **단점**: 데이터 손실 가능성 존재, 순서 보장 안 됨.
  - **사용 사례**: 실시간 스트리밍, 온라인 게임, VoIP.

애플리케이션층
  HTTP,SMTP,POP3
  어떻게 데이터를 주고받을지 결정
트랜스포트층
  데이터 전달하는것을 결정
    TCP -보낼때마다 송신지와 데이터 명시
    UDP -연결 끊기기전까지 전달
인터넷층
  IP주소
  컴퓨터,라우터가 존재
네트워크 인터페이스층
  물리적인 통신
  WI-FI,유선랜,블루투스
  랜카드나 허브 등이 존재
3-6 라우터
  라우터의 역할
  전송되는 데이터를 자신이 목적지롤 보낼것인지 다음 라우터로 중계할지 결정
  서버는 네트워크 기기를 포함한 클라이언트의 가동상황을 볼수 있음
3-7 가상서버, VDI
  가상서버
    물리적으로 1대의 서버안에 복수 서버를 가상의로 띄우는것
      물리서버를 가상서버로 2대로 나누면 성능 떨어짐
  VDI 
    데스크톱 가상화
현대방식
  컨테이너	
  도커와 같은 기술을 사용해 애플리케이션과 의존성을 패키징하여 가볍고 빠른 가상화 환경 제공.
  자원 효율적 사용, 빠른 배포 및 시작, 개발/운영 환경 일치.	운영 환경에 따라 추가 설정(오케스트레이션)이 필요.

요즘은 도커와 같은 컨테이너 기반 가상화가 표준으로 자리 잡고 있으며, 
기존의 VM 방식은 특정 환경(예: VDI나 고립된 OS 실행)에서만 사용되는 경향이 있습니다.
3-8 텔레..?
  불필요
3-9 패브릭 네트워크
  불필요
3-10 어플라이언스 서버 , 가상 어플라아이언스 서버
  불필요
3-11 RAID,SAS,FC,SATA
  서버의 디스크
  1.	속도: HDD 기반의 전통적인 디스크는 NVMe SSD보다 속도가 훨씬 느립니다. 현대적인 구성은 빠른 데이터 처리 속도를 요구하는 환경에 적합합니다.
	2.	신뢰성: RAID는 물리적 디스크 장애 복구를 담당했지만, 현대적인 구성에서는 클라우드 중복성과 스냅샷 기능이 이를 대체합니다.
	3.	확장성: 전통적인 방식은 물리적 하드웨어를 추가해야 했지만, 현대적인 클라우드 스토리지는 필요할 때마다 쉽게 확장 가능합니다.
	4.	비용: 전통적인 방식은 초기 설치 비용이 높지만, 현대적 클라우드 방식은 사용량 기반으로 과금되므로 초기 비용 부담이 적습니다.
	5.	운영 환경: 전통적인 구성은 온프레미스 서버 중심이고, 현대 구성은 클라우드와 컨테이너 환경에 최적화되어 있습니다.
전통적인 방식은 여전히 데이터센터 기반의 특정 환경에서 사용되지만, 
현대적인 서버 구성은 NVMe SSD와 클라우드 스토리지를 중심으로 확장성과 속도를 극대화하며, 관리 및 비용 효율성을 강조하고 있습니다.


실습

--예전내용이라 지금의 방식과 비교 조사하여 작성

  


  
